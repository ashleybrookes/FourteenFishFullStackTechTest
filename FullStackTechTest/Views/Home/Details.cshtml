@model FullStackTechTest.Models.Home.DetailsViewModel

@{
    ViewData["Title"] = Model.IsEditing ? "Edit " : "" + $"{Model.Person.FirstName} {Model.Person.LastName}";
}

<div class="container">
    <h2>Profile</h2>
    <div class="pb-4">
        @if (!Model.IsEditing)
        {
            <a href="@Url.Action("Index")" class="btn btn-primary" role="button">Back</a>
            <a href="@Url.Action("Edit", new { id = Model.Person.Id })" class="btn btn-primary" role="button">Edit</a>
        }
        else {
            <a href="@Url.Action("Details", new { id = Model.Person.Id })" class="btn btn-primary" role="button">Cancel</a>
        }
        @if (Model.IsEditing)
        {
            <div>
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        }
    </div>

    @using (Html.BeginForm("Edit", "Home", FormMethod.Post, new { @class = "form-inline" }))
    {
        /* The hidden inputs ensure the address.Id and address.personId are posted within model in the edit method */
        <input type="hidden" name="address.id" value="@Model.Address.Id" />
        <input type="hidden" name="address.personId" value="@Model.Address.PersonId" />
        
        <div class="form-group pb-4">
            <label>Id:</label>
            <input type="number" name="person.id" value="@Model.Person.Id" class="form-control-plaintext" readonly/>
        </div>

        <div class="form-group pb-1">
            <label>First Name:</label>
            <input type="text" name="person.firstName" value="@Model.Person.FirstName" class="@(Model.IsEditing ? "form-control" : "form-control-plaintext")" @(Model.IsEditing ? "" : "readonly")/>
        </div>
        <div class="form-group pb-4">
            <label>Last Name:</label>
            <input type="text" name="person.lastName" value="@Model.Person.LastName" class="@(Model.IsEditing ? "form-control" : "form-control-plaintext")" @(Model.IsEditing ? "" : "readonly")/>
        </div>
        <div class="form-group pb-4">
            <label>GMC:</label>
            <input type="number" name="person.gmc" value="@Model.Person.GMC" class="@(Model.IsEditing ? "form-control" : "form-control-plaintext")" @(Model.IsEditing ? "" : "readonly")/>
        </div>

        <h4>Address:</h4>

        <div class="form-group pb-1">
            <label>Address:</label>
            <input type="text" name="address.line1" value="@Model.Address.Line1" class="@(Model.IsEditing ? "form-control" : "form-control-plaintext")" @(Model.IsEditing ? "" : "readonly")/>
        </div>
        <div class="form-group pb-1">
            <label class="form-label">City:</label>
            <input type="text" name="address.city" value="@Model.Address.City" class="@(Model.IsEditing ? "form-control" : "form-control-plaintext")" @(Model.IsEditing ? "" : "readonly")/>
        </div>
        <div class="form-group pb-4">
            <label>Postcode:</label>
            <input type="text" name="address.postcode" value="@Model.Address.Postcode" class="@(Model.IsEditing ? "form-control" : "form-control-plaintext")" @(Model.IsEditing ? "" : "readonly")/>
        </div>

        <h4>Specialities</h4>
        @for (var i = 0; i < @Model.SpecialityCheckBoxList.Count(); i++)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" asp-for="@Model.SpecialityCheckBoxList[i].IsChecked" id="chk@(@Model.SpecialityCheckBoxList[i].Value)" disabled="@(Model.IsEditing == false)"  />
                <label class="form-check-label" for="chk@(@Model.SpecialityCheckBoxList[i].Value)" asp-for="@Model.SpecialityCheckBoxList[i].IsChecked" >
                    @Model.SpecialityCheckBoxList[i].Text
                </label>
                <input type="hidden" asp-for="@Model.SpecialityCheckBoxList[i].Value" />
                <input type="hidden" asp-for="@Model.SpecialityCheckBoxList[i].Text" />
            </div>
        }

        
    }
</div>